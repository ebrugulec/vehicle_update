// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: vehicle_update.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "schema";

export enum OperationalStatus {
  /** MAINTENANCE_REQUIRED - Indicates that the vehicle requires maintenance or repairs. */
  MAINTENANCE_REQUIRED = 0,
  /** PARTLY_OPERATIONAL - Specifies that the vehicle is partially functional but may have limited capabilities. */
  PARTLY_OPERATIONAL = 1,
  /** OPERATIONAL - Represents that the vehicle is fully functional and available for use. */
  OPERATIONAL = 2,
  /** IN_TRANSFER - Specifies that the vehicle is being transported between locations. */
  IN_TRANSFER = 3,
  /** AT_SUPPLIER - Indicates that the vehicle is currently located at the supplier's facility. */
  AT_SUPPLIER = 4,
  /** STOLEN - Indicates that the vehicle has been reported as stolen. */
  STOLEN = 5,
  /** IN_STORAGE - Represents that the vehicle is stored and not actively in use. */
  IN_STORAGE = 6,
  UNRECOGNIZED = -1,
}

export function operationalStatusFromJSON(object: any): OperationalStatus {
  switch (object) {
    case 0:
    case "MAINTENANCE_REQUIRED":
      return OperationalStatus.MAINTENANCE_REQUIRED;
    case 1:
    case "PARTLY_OPERATIONAL":
      return OperationalStatus.PARTLY_OPERATIONAL;
    case 2:
    case "OPERATIONAL":
      return OperationalStatus.OPERATIONAL;
    case 3:
    case "IN_TRANSFER":
      return OperationalStatus.IN_TRANSFER;
    case 4:
    case "AT_SUPPLIER":
      return OperationalStatus.AT_SUPPLIER;
    case 5:
    case "STOLEN":
      return OperationalStatus.STOLEN;
    case 6:
    case "IN_STORAGE":
      return OperationalStatus.IN_STORAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationalStatus.UNRECOGNIZED;
  }
}

export function operationalStatusToJSON(object: OperationalStatus): string {
  switch (object) {
    case OperationalStatus.MAINTENANCE_REQUIRED:
      return "MAINTENANCE_REQUIRED";
    case OperationalStatus.PARTLY_OPERATIONAL:
      return "PARTLY_OPERATIONAL";
    case OperationalStatus.OPERATIONAL:
      return "OPERATIONAL";
    case OperationalStatus.IN_TRANSFER:
      return "IN_TRANSFER";
    case OperationalStatus.AT_SUPPLIER:
      return "AT_SUPPLIER";
    case OperationalStatus.STOLEN:
      return "STOLEN";
    case OperationalStatus.IN_STORAGE:
      return "IN_STORAGE";
    case OperationalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface VehicleUpdate {
  /** describing the exact timestamp a given event was triggered */
  eventTimestampPosix: number;
  /** describing the event name */
  eventName: string;
  /** unique identifier for vehicle */
  licensePlate: string;
  /** describing the supplier name of the vehicle */
  supplierName: string;
  /** describing the hub slug where the vehicle is used */
  hubSlug: string;
  /** describing the unique identifier for vehicle */
  vehicleId: string;
  /** describing the current status of the vehicle */
  operationalStatus: string;
}

function createBaseVehicleUpdate(): VehicleUpdate {
  return {
    eventTimestampPosix: 0,
    eventName: "",
    licensePlate: "",
    supplierName: "",
    hubSlug: "",
    vehicleId: "",
    operationalStatus: "",
  };
}

export const VehicleUpdate = {
  encode(message: VehicleUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventTimestampPosix !== 0) {
      writer.uint32(8).int64(message.eventTimestampPosix);
    }
    if (message.eventName !== "") {
      writer.uint32(18).string(message.eventName);
    }
    if (message.licensePlate !== "") {
      writer.uint32(26).string(message.licensePlate);
    }
    if (message.supplierName !== "") {
      writer.uint32(34).string(message.supplierName);
    }
    if (message.hubSlug !== "") {
      writer.uint32(42).string(message.hubSlug);
    }
    if (message.vehicleId !== "") {
      writer.uint32(50).string(message.vehicleId);
    }
    if (message.operationalStatus !== "") {
      writer.uint32(58).string(message.operationalStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VehicleUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.eventTimestampPosix = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.licensePlate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supplierName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hubSlug = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.vehicleId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.operationalStatus = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleUpdate {
    return {
      eventTimestampPosix: isSet(object.eventTimestampPosix) ? globalThis.Number(object.eventTimestampPosix) : 0,
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
      licensePlate: isSet(object.licensePlate) ? globalThis.String(object.licensePlate) : "",
      supplierName: isSet(object.supplierName) ? globalThis.String(object.supplierName) : "",
      hubSlug: isSet(object.hubSlug) ? globalThis.String(object.hubSlug) : "",
      vehicleId: isSet(object.vehicleId) ? globalThis.String(object.vehicleId) : "",
      operationalStatus: isSet(object.operationalStatus) ? globalThis.String(object.operationalStatus) : "",
    };
  },

  toJSON(message: VehicleUpdate): unknown {
    const obj: any = {};
    if (message.eventTimestampPosix !== 0) {
      obj.eventTimestampPosix = Math.round(message.eventTimestampPosix);
    }
    if (message.eventName !== "") {
      obj.eventName = message.eventName;
    }
    if (message.licensePlate !== "") {
      obj.licensePlate = message.licensePlate;
    }
    if (message.supplierName !== "") {
      obj.supplierName = message.supplierName;
    }
    if (message.hubSlug !== "") {
      obj.hubSlug = message.hubSlug;
    }
    if (message.vehicleId !== "") {
      obj.vehicleId = message.vehicleId;
    }
    if (message.operationalStatus !== "") {
      obj.operationalStatus = message.operationalStatus;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleUpdate>, I>>(base?: I): VehicleUpdate {
    return VehicleUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleUpdate>, I>>(object: I): VehicleUpdate {
    const message = createBaseVehicleUpdate();
    message.eventTimestampPosix = object.eventTimestampPosix ?? 0;
    message.eventName = object.eventName ?? "";
    message.licensePlate = object.licensePlate ?? "";
    message.supplierName = object.supplierName ?? "";
    message.hubSlug = object.hubSlug ?? "";
    message.vehicleId = object.vehicleId ?? "";
    message.operationalStatus = object.operationalStatus ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
