"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: vehicle_update.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.VehicleUpdate = exports.operationalStatusToJSON = exports.operationalStatusFromJSON = exports.OperationalStatus = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "schema";
var OperationalStatus;
(function (OperationalStatus) {
    /** MAINTENANCE_REQUIRED - Indicates that the vehicle requires maintenance or repairs. */
    OperationalStatus[OperationalStatus["MAINTENANCE_REQUIRED"] = 0] = "MAINTENANCE_REQUIRED";
    /** PARTLY_OPERATIONAL - Specifies that the vehicle is partially functional but may have limited capabilities. */
    OperationalStatus[OperationalStatus["PARTLY_OPERATIONAL"] = 1] = "PARTLY_OPERATIONAL";
    /** OPERATIONAL - Represents that the vehicle is fully functional and available for use. */
    OperationalStatus[OperationalStatus["OPERATIONAL"] = 2] = "OPERATIONAL";
    /** IN_TRANSFER - Specifies that the vehicle is being transported between locations. */
    OperationalStatus[OperationalStatus["IN_TRANSFER"] = 3] = "IN_TRANSFER";
    /** AT_SUPPLIER - Indicates that the vehicle is currently located at the supplier's facility. */
    OperationalStatus[OperationalStatus["AT_SUPPLIER"] = 4] = "AT_SUPPLIER";
    /** STOLEN - Indicates that the vehicle has been reported as stolen. */
    OperationalStatus[OperationalStatus["STOLEN"] = 5] = "STOLEN";
    /** IN_STORAGE - Represents that the vehicle is stored and not actively in use. */
    OperationalStatus[OperationalStatus["IN_STORAGE"] = 6] = "IN_STORAGE";
    OperationalStatus[OperationalStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OperationalStatus || (exports.OperationalStatus = OperationalStatus = {}));
function operationalStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "MAINTENANCE_REQUIRED":
            return OperationalStatus.MAINTENANCE_REQUIRED;
        case 1:
        case "PARTLY_OPERATIONAL":
            return OperationalStatus.PARTLY_OPERATIONAL;
        case 2:
        case "OPERATIONAL":
            return OperationalStatus.OPERATIONAL;
        case 3:
        case "IN_TRANSFER":
            return OperationalStatus.IN_TRANSFER;
        case 4:
        case "AT_SUPPLIER":
            return OperationalStatus.AT_SUPPLIER;
        case 5:
        case "STOLEN":
            return OperationalStatus.STOLEN;
        case 6:
        case "IN_STORAGE":
            return OperationalStatus.IN_STORAGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OperationalStatus.UNRECOGNIZED;
    }
}
exports.operationalStatusFromJSON = operationalStatusFromJSON;
function operationalStatusToJSON(object) {
    switch (object) {
        case OperationalStatus.MAINTENANCE_REQUIRED:
            return "MAINTENANCE_REQUIRED";
        case OperationalStatus.PARTLY_OPERATIONAL:
            return "PARTLY_OPERATIONAL";
        case OperationalStatus.OPERATIONAL:
            return "OPERATIONAL";
        case OperationalStatus.IN_TRANSFER:
            return "IN_TRANSFER";
        case OperationalStatus.AT_SUPPLIER:
            return "AT_SUPPLIER";
        case OperationalStatus.STOLEN:
            return "STOLEN";
        case OperationalStatus.IN_STORAGE:
            return "IN_STORAGE";
        case OperationalStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.operationalStatusToJSON = operationalStatusToJSON;
function createBaseVehicleUpdate() {
    return {
        eventTimestampPosix: 0,
        eventName: "",
        licensePlate: "",
        supplierName: "",
        hubSlug: "",
        vehicleId: "",
        operationalStatus: "",
    };
}
exports.VehicleUpdate = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventTimestampPosix !== 0) {
            writer.uint32(8).int64(message.eventTimestampPosix);
        }
        if (message.eventName !== "") {
            writer.uint32(18).string(message.eventName);
        }
        if (message.licensePlate !== "") {
            writer.uint32(26).string(message.licensePlate);
        }
        if (message.supplierName !== "") {
            writer.uint32(34).string(message.supplierName);
        }
        if (message.hubSlug !== "") {
            writer.uint32(42).string(message.hubSlug);
        }
        if (message.vehicleId !== "") {
            writer.uint32(50).string(message.vehicleId);
        }
        if (message.operationalStatus !== "") {
            writer.uint32(58).string(message.operationalStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVehicleUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventTimestampPosix = longToNumber(reader.int64());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.eventName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.licensePlate = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.supplierName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.hubSlug = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.vehicleId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.operationalStatus = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventTimestampPosix: isSet(object.eventTimestampPosix) ? globalThis.Number(object.eventTimestampPosix) : 0,
            eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : "",
            licensePlate: isSet(object.licensePlate) ? globalThis.String(object.licensePlate) : "",
            supplierName: isSet(object.supplierName) ? globalThis.String(object.supplierName) : "",
            hubSlug: isSet(object.hubSlug) ? globalThis.String(object.hubSlug) : "",
            vehicleId: isSet(object.vehicleId) ? globalThis.String(object.vehicleId) : "",
            operationalStatus: isSet(object.operationalStatus) ? globalThis.String(object.operationalStatus) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventTimestampPosix !== 0) {
            obj.eventTimestampPosix = Math.round(message.eventTimestampPosix);
        }
        if (message.eventName !== "") {
            obj.eventName = message.eventName;
        }
        if (message.licensePlate !== "") {
            obj.licensePlate = message.licensePlate;
        }
        if (message.supplierName !== "") {
            obj.supplierName = message.supplierName;
        }
        if (message.hubSlug !== "") {
            obj.hubSlug = message.hubSlug;
        }
        if (message.vehicleId !== "") {
            obj.vehicleId = message.vehicleId;
        }
        if (message.operationalStatus !== "") {
            obj.operationalStatus = message.operationalStatus;
        }
        return obj;
    },
    create(base) {
        return exports.VehicleUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseVehicleUpdate();
        message.eventTimestampPosix = (_a = object.eventTimestampPosix) !== null && _a !== void 0 ? _a : 0;
        message.eventName = (_b = object.eventName) !== null && _b !== void 0 ? _b : "";
        message.licensePlate = (_c = object.licensePlate) !== null && _c !== void 0 ? _c : "";
        message.supplierName = (_d = object.supplierName) !== null && _d !== void 0 ? _d : "";
        message.hubSlug = (_e = object.hubSlug) !== null && _e !== void 0 ? _e : "";
        message.vehicleId = (_f = object.vehicleId) !== null && _f !== void 0 ? _f : "";
        message.operationalStatus = (_g = object.operationalStatus) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=vehicle_update.js.map
